def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

def propertyFileNameMap = [
        dev  : 'key_dev.properties',
        stage: 'key_staging.properties',
        prod : 'key_prod.properties'
]
def propertyMap = [:]

for (fileNameEntry in propertyFileNameMap.entrySet()) {
    def keystorePropertiesFile = rootProject.file(fileNameEntry.value)
    if (keystorePropertiesFile.exists()) {
        def keystoreProperties = new Properties()
        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
        propertyMap.put(fileNameEntry.key, keystoreProperties)
    }
}

android {
    compileSdkVersion 30

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.example.test_actions"
        minSdkVersion 16
        targetSdkVersion 30
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }


    signingConfigs {
        releaseDev {
            def keystoreProperties = propertyMap['dev']
            if (keystoreProperties != null) {
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
                storePassword keystoreProperties['storePassword']
            }
        }

        releaseStage {
            def keystoreProperties = propertyMap['stage']
            if (keystoreProperties != null) {
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
                storePassword keystoreProperties['storePassword']
            }
        }

        releaseProd {
            def keystoreProperties = propertyMap['prod']
            if (keystoreProperties != null) {
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
                storePassword keystoreProperties['storePassword']
            }
        }
    }

    flavorDimensions "env"

    productFlavors {
        dev {
            dimension "env"

            applicationIdSuffix ".dev"

            resValue "string", "app_name", "informed dev"
            resValue "string", "app_link_host", "localhost"

            if (propertyMap.containsKey('dev')) {
                signingConfig signingConfigs.releaseDev
            } else {
                signingConfig signingConfigs.debug
            }
        }

        stage {
            dimension "env"

            applicationIdSuffix ".staging"

            resValue "string", "app_name", "com.example.test_actions"
            resValue "string", "app_link_host", "com.example.test_actions"

            if (propertyMap.containsKey('stage')) {
                signingConfig signingConfigs.releaseStage
            } else {
                signingConfig signingConfigs.debug
            }
        }

        prod {
            dimension "env"

            resValue "string", "app_name", "com.example.test_actions"
            resValue "string", "app_link_host", "com.example.test_actions"

            if (propertyMap.containsKey('prod')) {
                signingConfig signingConfigs.releaseProd
            } else {
                signingConfig signingConfigs.debug
            }
        }
    }


    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile(
                    'proguard-android-optimize.txt'),
                    'proguard-rules.pro'
        }

        profile {
            signingConfig null
        }

        debug {
            signingConfig null
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
